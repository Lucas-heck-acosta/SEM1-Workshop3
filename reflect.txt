14 lines (12 sloc)  520 Bytes
   
*****************************************************************************
                              Reflection
                          Workshop - #3 (P2)
Full Name  : Lucas Heck Acosta
Student ID#: 165041211
Email      : lheck-acosta@myseneca.ca
Section    : NKK

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************

1)    printf(" 1|       %d         |         %d          |      %d      |   %d   |       %d\n", ((choice_strengh == 'M' || choice_strengh == 'm') && (coffee1_type == 'L' || coffee1_type == 'l')) || ((choice_strengh == 'R' || choice_strengh == 'r') && (coffee1_type == 'B' || coffee1_type == 'b')), ((choice_maker == 'R' || choice_maker == 'r') && (coffee1_grind == 'C' || coffee1_grind == 'c')) || ((choice_maker == 'C' || choice_maker == 'c') && (coffee1_grind == 'F' || coffee1_grind == 'f')),
            (choice_servings <= 4 && coffee1_bag == 250) || ((choice_servings >= 5 && choice_servings <= 9) && coffee1_bag == 500) || (choice_servings >= 10 && coffee1_bag == 1000), ((choice_cream == 'Y' || choice_cream == 'y') && (coffee1_cream == 'Y' || coffee1_cream == 'y') || (choice_cream == 'N' || choice_cream == 'n') && (coffee1_cream == 'n' || coffee1_cream == 'N')), ((choice_maker == 'R' || choice_maker == 'r') && coffee1_temp <= 69.9) || ((choice_maker == 'C' || choice_maker == 'c') && coffee1_temp >= 70));

This "line" of code was definitely the hardest one, although it appears many times in my code, this line is not complex just because it's super long, but also because every tiny part of it had to be carefully written and took a long time. After the print output (which was hard to format correctly by itself) every variable that is set to appear on each  %d had to be analyzed over and over to see if the logical expression were actually what I needed to get the output I wanted.

2)From the code above (without the lower case checking for readability)

(choice_strengh == 'M' && coffee1_type == 'L') || (choice_strengh == 'R' && coffee1_type == 'B')

what I needed with this logical expression, was to check if the value of coffee strength for coffee1 (the first coffee) was a match with what the costumer wanted. 
Looking at the code, on the left brackets, It checks if the value of choice_strengh was equal to light when the costumer wanted a mild coffee, on the right brackets, it does the opposite, checking if the value was Blend when the costumer wanted Rich.

Another way to say this is:
(!(choice_strengh != 'M') && !(coffee1_type != 'L')) || (!(choice_strengh != 'R') && !(coffee1_type != 'B'))

In this code, it is all the same, but instead of using the concept of A == B I used the concept of ! ( A !=B)
using  deMorgan's Law.



3) I think it is because in part one we only needed to do it once, on the second part, if we had a variable converting it every time we needed, it would be a lot of new variables, instead of just calculating it right away